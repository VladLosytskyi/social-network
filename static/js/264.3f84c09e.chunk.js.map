{"version":3,"file":"static/js/264.3f84c09e.chunk.js","mappings":"yLACA,EAAwB,wBAAxB,EAA6D,6BAA7D,EAAmG,yBAAnG,EAAuI,2BAAvI,EAA4K,0BAA5K,EAAuN,iCAAvN,EAAiQ,yB,mBCiBjQ,EAR8B,SAAC,GAAwB,IAAtBA,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACnCC,EAAO,aAAeF,EAE5B,OACE,SAAC,KAAD,CAASG,GAAKD,EAAOE,UAAY,qBAAGC,SAA0BC,EAAiB,IAA/E,SAAsFL,KCF1F,EAJkC,SAAC,GAAiB,IAAfM,EAAc,EAAdA,QACnC,OAAO,gBAAKH,UAAYE,EAAjB,SAAqCC,K,uCCFxCC,EAAW,CACfC,EAAAA,GACAC,EAAAA,EAAAA,GAAiB,MA0BnB,GAAeC,EAAAA,EAAAA,GAA8B,CAAEC,KAAM,0BAArD,EAnBgE,SAAC,GAEO,IADLC,EACI,EADJA,aAEjE,OACE,kBAAMC,SAAWD,EAAeT,UAAYE,EAA5C,WACE,0BACE,SAACS,EAAA,EAAD,CAAOC,UAAYC,EAAAA,EACZhB,KAAK,iBACLiB,YAAY,wBACZV,SAAWA,OAGpB,0BACE,mBAAQJ,UAAYE,EAApB,kCCOR,EAvBoC,SAAC,GAAmC,IAAjCa,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAC7CC,EAAgBF,EAAaG,MAAMC,KAAI,SAAAC,GAAI,OAAI,SAAC,EAAD,CAAOvB,KAAOuB,EAAKvB,KAAOD,SAAWwB,EAAKxB,UAC7BwB,EAAKC,OACjEC,EAAmBP,EAAaQ,SAASJ,KAAI,SAAAhB,GAAO,OAAI,SAAC,EAAD,CAASA,QAAUA,EAAQA,SACZA,EAAQkB,OAMrF,OACE,iBAAKrB,UAAYE,EAAjB,WACE,gBAAKF,UAAYE,EAAjB,SACIe,KAEJ,iBAAKjB,UAAYE,EAAjB,WACE,yBAAOoB,KACP,SAAC,EAAD,CAAcZ,SAXE,SAAAc,GACpBR,EAAYQ,EAAOC,0B,qDCVjBC,EAAkB,SAACC,GAAD,MAAuB,CAC7CC,OAAQD,EAAME,KAAKD,SCKrB,IAGME,EAAqB,CAAEd,YAAAA,EAAAA,GAE7B,GAAee,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KANsB,SAACL,GAAD,MAAuB,CAC3CZ,aAAcY,EAAMZ,gBAK0Ce,IDR3D,SAA8BG,GAMnC,OAAOD,EAAAA,EAAAA,IAA0BN,EAA1BM,EALyC,SAAC,GAA0B,IAAxBJ,EAAuB,EAAvBA,OAAWM,GAAY,YACxE,OAAON,GACH,SAACK,GAAD,UAAgBC,KAChB,SAAC,KAAD,CAAUnC,GAAG,gBCGrB,CAGEoC","sources":["webpack://social-network/./src/components/Messages/Messages.module.css?8e7e","components/Messages/Chats/Chats.tsx","components/Messages/Message/Message.tsx","components/Messages/MessagesForm.tsx","components/Messages/Messages.tsx","hoc/withAuthRedirect.tsx","components/Messages/MessagesContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chats\":\"Messages_chats__5sSzs\",\"chatsItems\":\"Messages_chatsItems__hDNq9\",\"active\":\"Messages_active__b93f2\",\"messages\":\"Messages_messages__8s+pC\",\"message\":\"Messages_message__O19dD\",\"addMessageForm\":\"Messages_addMessageForm__3sFj0\",\"button\":\"Messages_button__ccvvi\"};","import { FC } from 'react'\r\n// @ts-ignore\r\nimport classes from './../Messages.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ninterface ChatsProps {\r\n  nickname: string\r\n  name: string\r\n}\r\n\r\nconst Chats: FC<ChatsProps> = ({ nickname, name }) => {\r\n  const path = '/messages/' + nickname\r\n\r\n  return (\r\n    <NavLink to={ path } className={ ({ isActive }) => isActive ? classes.active : '' }>{ name }</NavLink>\r\n  )\r\n}\r\n\r\nexport default Chats","import { FC } from 'react'\r\n// @ts-ignore\r\nimport classes from './../Messages.module.css'\r\n\r\ninterface MessageProps {\r\n  message: string\r\n}\r\n\r\nconst Message: FC<MessageProps> = ({ message }) => {\r\n  return <div className={ classes.message }>{ message }</div>\r\n}\r\n\r\nexport default Message","import { FC } from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n// @ts-ignore\nimport classes from './Messages.module.css'\nimport { Textarea } from '../common/FormsControls/FormsControls'\nimport { required, maxLengthCreator } from '../../utillities/validators/validators'\n\nconst validate = [\n  required,\n  maxLengthCreator(100)\n]\n\ninterface MessagesFormValues {\n  newMessageText: string\n}\n\nconst MessagesForm: FC<InjectedFormProps<MessagesFormValues>> = ({\n                                                                   handleSubmit\n                                                                 }) => {\n  return (\n    <form onSubmit={ handleSubmit } className={ classes.addMessageForm }>\n      <div>\n        <Field component={ Textarea }\n               name=\"newMessageText\"\n               placeholder=\"Enter your message...\"\n               validate={ validate }\n        />\n      </div>\n      <div>\n        <button className={ classes.button }>Send message</button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<MessagesFormValues>({ form: 'messagesAddMessageForm' })(MessagesForm)","import { FC } from 'react'\r\n// @ts-ignore\r\nimport classes from './Messages.module.css'\r\nimport Chats from './Chats/Chats'\r\nimport Message from './Message/Message'\r\nimport MessagesForm from './MessagesForm'\r\nimport { IMessagesState } from '../../types/reducers-types/messages-types'\r\n\r\ninterface MessagesProps {\r\n  messagesPage: IMessagesState\r\n  sendMessage: (newMessageText: string) => void\r\n}\r\n\r\nconst Messages: FC<MessagesProps> = ({ messagesPage, sendMessage }) => {\r\n  const chatsElements = messagesPage.chats.map(chat => <Chats name={ chat.name } nickname={ chat.nickname }\r\n                                                              key={ chat.id } />)\r\n  const messagesElements = messagesPage.messages.map(message => <Message message={ message.message }\r\n                                                                         key={ message.id } />)\r\n\r\n  const addNewMessage = values => {\r\n    sendMessage(values.newMessageText)\r\n  }\r\n\r\n  return (\r\n    <div className={ classes.chats }>\r\n      <div className={ classes.chatsItems }>\r\n        { chatsElements }\r\n      </div>\r\n      <div className={ classes.messages }>\r\n        <div>{ messagesElements }</div>\r\n        <MessagesForm onSubmit={ addNewMessage } />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messages","import { ComponentType, FC } from 'react'\nimport { connect } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { RootState } from '../redux/store'\n\n\ninterface IMapStateToProps {\n  isAuth: boolean\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<CP>(Component: ComponentType<CP>) {\n  const RedirectComponent: FC<IMapStateToProps> = ({ isAuth, ...props }) => {\n    return isAuth\n      ? <Component { ...props as CP } />\n      : <Navigate to=\"/login\" />\n  }\n  return connect<IMapStateToProps>(mapStateToProps)(RedirectComponent)\n}\n","import { ComponentType } from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport Messages from './Messages'\nimport { RootState } from '../../redux/store'\nimport { sendMessage } from '../../redux/messages-reducer'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\nimport { IMessagesState } from '../../types/reducers-types/messages-types'\n\ninterface IMapStateToProps {\n    messagesPage: IMessagesState\n}\ninterface IMapDispatchToProps {\n    sendMessage: (newMessageText: string) => void\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    messagesPage: state.messagesPage\n})\nconst mapDispatchToProps = { sendMessage }\n\nexport default compose<ComponentType>(\n  connect<IMapStateToProps, IMapDispatchToProps>(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Messages)\n\n"],"names":["nickname","name","path","to","className","isActive","classes","message","validate","required","maxLengthCreator","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","placeholder","messagesPage","sendMessage","chatsElements","chats","map","chat","id","messagesElements","messages","values","newMessageText","mapStateToProps","state","isAuth","auth","mapDispatchToProps","compose","connect","Component","props","Messages"],"sourceRoot":""}