{"version":3,"file":"static/js/87.6c986977.chunk.js","mappings":"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","sources":["Components/Profile/Profile.module.css","webpack://social-network/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://social-network/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPostsForm.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","webpack://social-network/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__n+LxT\"};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__xF1+G\",\"posts\":\"MyPosts_posts__qWDsY\",\"blueButton\":\"MyPosts_blueButton__CybSN\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__G6WIJ\",\"profileImage\":\"Post_profileImage__DT8Ht\",\"postText\":\"Post_postText__8zl55\",\"likes\":\"Post_likes__4-pyj\"};","import classes from './Post.module.css'\r\n\r\nconst Post = ({ message, likesCount }) => {\r\n  return (\r\n    <div className={ classes.post }>\r\n      <img\r\n        className={ classes.profileImage }\r\n        src=\"https://cdn-icons-png.flaticon.com/512/1464/1464795.png\"\r\n        alt=\"Profile avatar\"\r\n      />\r\n      <div>\r\n        <div className={ classes.postText }>\r\n          { message }\r\n        </div>\r\n        <div className={ classes.likes }>\r\n          { likesCount }<span> likes</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post","import { Field, reduxForm } from 'redux-form'\rimport classes from './MyPosts.module.css'\rimport { Textarea } from '../../common/FormsControls/FormsControls'\rimport { required, maxLengthCreator } from '../../../utillities/validators/validators'\r\rconst validate = [\r  required,\r  maxLengthCreator(50)\r]\r\rconst MyPostsForm = ({ handleSubmit }) => {\r  return (\r    <form onSubmit={ handleSubmit }>\r      <div>\r        <Field component={ Textarea }\r               name=\"newPostText\"\r               placeholder=\"Enter your post text...\"\r               validate={ validate }\r        />\r      </div>\r      <div>\r        <button className={ classes.blueButton }>Add post</button>\r      </div>\r    </form>\r  )\r}\r\rexport default reduxForm({form: \"profileMyPostsForm\"})(MyPostsForm)","import React from 'react'\r\nimport classes from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport MyPostsForm from './MyPostsForm'\r\n\r\nconst MyPosts = React.memo(props => {\r\n  const postsElements =\r\n    [...props.posts]\r\n      .reverse()\r\n      .map(post => <Post message={ post.message } likesCount={ post.likesCount } key={ post.id } />)\r\n\r\n  const addPost = values => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={ classes.postsBlock }>\r\n      <h3>My posts</h3>\r\n      <MyPostsForm onSubmit={ addPost } />\r\n      <div className={ classes.posts }>\r\n        { postsElements }\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default MyPosts\r\n","import MyPosts from './MyPosts'\nimport { addPost } from '../../../redux/profile-reducer'\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.profilePage.posts\n  }\n}\nconst mapDispatchToProps = { addPost }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n","// extracted by mini-css-extract-plugin\nexport default {\"blueText\":\"ProfileInfo_blueText__aphDT\",\"profileInfo\":\"ProfileInfo_profileInfo__rys-e\",\"userAvatarContainer\":\"ProfileInfo_userAvatarContainer__n700o\",\"userAvatar\":\"ProfileInfo_userAvatar__TFwT5\",\"setUserAvatar\":\"ProfileInfo_setUserAvatar__TrEOD\",\"profileData\":\"ProfileInfo_profileData__0LXHh\",\"status\":\"ProfileInfo_status__FQ334\",\"statusInput\":\"ProfileInfo_statusInput__-cX0T\",\"blueButton\":\"ProfileInfo_blueButton__VqmxD\"};","import React, { useEffect, useState } from 'react'\nimport classes from './ProfileInfo.module.css'\n\nconst ProfileStatusWithHooks = props => {\n\n  let [editMode, setEditMode] = useState(false)\n  let [status, setStatus] = useState(props.status)\n\n  useEffect(() => {\n    setStatus(props.status)\n  }, [props.status])\n\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n\n  const deactivateEditMode = () => {\n    setEditMode(false)\n    props.updateStatus(status)\n  }\n\n  const discardChanges = () => {\n    setEditMode(false)\n  }\n\n  const onStatusChange = event => {\n    setStatus(event.currentTarget.value)\n  }\n\n  return (\n    <div>\n      { props.userId === props.authorisedUserId\n        ? <>{ editMode\n          ? <div className={ classes.status }>\n            <div>\n              <span className={ classes.blueText }>Status:</span>\n              <input type=\"text\"\n                     onChange={ onStatusChange }\n                     value={ status }\n                     autoFocus={ true }\n                     className={ classes.statusInput }\n              />\n            </div>\n            <div>\n              <button onClick={ deactivateEditMode } className={ classes.blueButton }>Save Changes</button>\n              <button onClick={ discardChanges } className={ classes.blueButton }>Discard Changes</button>\n            </div>\n          </div>\n          : <div className={ classes.status }>\n            <div>\n              <span className={ classes.blueText }>Status: </span>\n              <span>{ props.status || 'No status' }</span>\n            </div>\n            <button onClick={ activateEditMode } className={ classes.blueButton }>\n              Change Status\n            </button>\n          </div>\n        }</>\n        : <div className={ classes.status }>\n          <div>\n            <span className={ classes.blueText }>Status: </span>\n            <span>{ props.status || 'No status' }</span>\n          </div>\n        </div> }\n    </div>\n  )\n}\n\nexport default ProfileStatusWithHooks","import classes from './ProfileInfo.module.css'\r\nimport userAvatar from '../../../assets/images/userAvatar.png'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\n\r\nconst ProfileInfo = ({ profile, authorisedUserId, status, updateStatus, postUserAvatar }) => {\r\n  const onUserAvatarSelected = event => {\r\n    if (event.target.files.length) {\r\n      postUserAvatar(event.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !profile\r\n          ? <Preloader />\r\n          : <div className={ classes.profileInfo }>\r\n            <div className={ classes.userAvatarContainer }>\r\n              <img src={ profile.photos.large || userAvatar } className={ classes.userAvatar } alt=\"Profile photo\" />\r\n              { profile.userId === authorisedUserId &&\r\n                <label className={ `${classes.setUserAvatar} ${classes.blueButton}` } onChange={ onUserAvatarSelected }>\r\n                  <input type=\"file\"\r\n                         accept=\"image/png, image/jpg, image/gif, image/jpeg\"\r\n                         onChange={ onUserAvatarSelected } />Change Avatar\r\n                </label> }\r\n            </div>\r\n            <div className={ classes.profileData }>\r\n              <span className={ classes.blueText }>Nickname: </span><span>{ profile.fullName }</span>\r\n              <ProfileStatusWithHooks status={ status }\r\n                                      updateStatus={ updateStatus }\r\n                                      userId={ profile.userId }\r\n                                      authorisedUserId={ authorisedUserId } />\r\n            </div>\r\n          </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo","import classes from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\nconst Profile = ({ profile, authorisedUserId, status, updateStatus, postUserAvatar }) => {\r\n  return (\r\n    <section className={ classes.profile }>\r\n      <ProfileInfo profile={ profile }\r\n                   authorisedUserId={ authorisedUserId }\r\n                   status={ status }\r\n                   updateStatus={ updateStatus }\r\n                   postUserAvatar={ postUserAvatar }/>\r\n      <MyPostsContainer />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Profile","import { useEffect } from 'react'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\nimport { getUserProfile, getStatus, updateStatus, postUserAvatar } from '../../redux/profile-reducer'\nimport Profile from './Profile'\n\nconst ProfileContainer = props => {\n  useEffect(() => {\n    let userId = props.router.params.userId\n    if (!userId) {\n      userId = props.authorisedUserId\n      if (!userId) {\n        props.history.push('/login')\n      }\n    }\n    props.getUserProfile(userId)\n    props.getStatus(userId)\n  }, [props.router.params.userId])\n\n  return (\n    <Profile profile={ props.profile }\n             authorisedUserId={ props.authorisedUserId }\n             status={ props.status }\n             updateStatus={ props.updateStatus }\n             postUserAvatar={ props.postUserAvatar }\n    />\n  )\n}\n\nfunction withRouter(Component) {\n  function ComponentWithRouterProp(props) {\n    let location = useLocation()\n    let navigate = useNavigate()\n    let params = useParams()\n    return (\n      <Component\n        { ...props }\n        router={ { location, navigate, params } }\n      />\n    )\n  }\n\n  return ComponentWithRouterProp\n}\n\nconst mapStateToProps = state => {\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorisedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n  }\n}\nconst mapDispatchToProps = { getUserProfile, getStatus, updateStatus, postUserAvatar }\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withRouter\n)(ProfileContainer)"],"names":["message","likesCount","className","classes","src","alt","validate","required","maxLengthCreator","reduxForm","form","handleSubmit","Textarea","React","props","postsElements","posts","reverse","map","post","id","onSubmit","values","addPost","newPostText","mapDispatchToProps","connect","state","profilePage","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","userId","authorisedUserId","type","onChange","event","currentTarget","value","autoFocus","onClick","updateStatus","profile","postUserAvatar","onUserAvatarSelected","target","files","length","photos","large","userAvatar","accept","fullName","Preloader","MyPostsContainer","getUserProfile","getStatus","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","params","useParams","router","history","push"],"sourceRoot":""}