{"version":3,"file":"static/js/231.49648cb6.chunk.js","mappings":"kMACA,EAA2B,uBAA3B,EAA6D,uBAA7D,EAA8F,sBAA9F,EAA6H,qBAA7H,EAAyJ,mBAAzJ,EAAuL,uBAAvL,EAAwO,sCAAxO,EAA+R,6BAA/R,EAAyU,yBAAzU,EAA0W,oB,mBCgC1W,EArBgD,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,gBACjD,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAUjB,OACE,iBAAKC,UAAYC,EAAjB,WACE,qBAAUC,SAAW,SAAAC,GAAK,OAAIN,EAAWM,EAAMC,cAAcC,QAASA,MAAQT,KAC9E,mBAAQU,SAA+B,UAApBZ,EAA8Ba,QAX/B,WACfX,IAGLE,GAASU,EAAAA,EAAAA,IAAiBZ,IAC1BC,EAAW,MAMkEG,UAAYC,EAAvF,sB,mBCAN,EAdmCQ,EAAAA,MAAW,YAAwD,IAAD,IAApDb,QAAWc,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,SAAUhB,EAAgB,EAAhBA,QACnF,OACE,iBAAKI,UAAYC,EAAjB,WACE,SAAC,KAAD,CAASY,GAAE,mBAAgBH,GAAYV,UAAYC,EAAnD,UACE,gBAAKa,IAAMH,GAASI,EAAaC,IAAMD,OAEzC,iBAAKf,UAAYC,EAAjB,WACE,gBAAKD,UAAYC,EAAjB,SAAsCW,KACtC,gBAAKZ,UAAYC,EAAjB,SAAqCL,aCnBhCqB,EAA0B,SAACC,GACtC,OAAOA,EAAMC,SAASC,UAGXC,EAA6B,SAACH,GACzC,OAAOA,EAAMC,SAASzB,iBC+CxB,EA5CqB,WACnB,OAAoDC,EAAAA,EAAAA,WAAS,GAA7D,eAAO2B,EAAP,KAA2BC,EAA3B,KACMH,GAA2BI,EAAAA,EAAAA,IAAYP,GACvCvB,GAAkB8B,EAAAA,EAAAA,IAAYH,GAC9BI,GAAiBC,EAAAA,EAAAA,QAAO,MACxB5B,GAAWC,EAAAA,EAAAA,MAmBjB,OATA4B,EAAAA,EAAAA,YAAU,WAER,OADA7B,GAAS8B,EAAAA,EAAAA,OACF,kBAAM9B,GAAS+B,EAAAA,EAAAA,UACrB,KAEHF,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVL,IAAoB,UAAAG,EAAeK,eAAf,SAAwBC,eAAe,CAAEC,SAAU,cAC1E,CAACZ,KAGF,gCACwB,UAApB1B,IACG,gBAAKM,UAAYC,EAAjB,UACD,gBAAKD,UAAYC,EAAjB,8DAGJ,qBAASD,UAAYC,EAArB,WACE,iBAAKD,UAAYC,EAAmBgC,SAzBzB,SAAA9B,GACf,IAAM+B,EAAU/B,EAAMC,cACtB+B,KAAKC,IAAKF,EAAQG,aAAeH,EAAQI,UAAaJ,EAAQK,cAAgB,KACzEjB,GAAsBC,GAAsB,GAC7CD,GAAsBC,GAAsB,IAqB5C,UACIH,EAASoB,KAAI,SAAC5C,GAAD,OAAa,SAAC,EAAD,CAASA,QAAUA,GAAgBA,EAAQ6C,QACvE,gBAAKC,IAAMjB,QAEb,gBAAKzB,UAAYC,EAAjB,UACE,SAAC,EAAD,CAAgBP,gBAAkBA","sources":["webpack://social-network/./src/components/Chat/Chat.module.css?f66a","components/Chat/AddMessageForm.tsx","components/Chat/Message.tsx","redux/chat-selectors.ts","components/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatPage\":\"Chat_chatPage__vBaCB\",\"messages\":\"Chat_messages__UMxjL\",\"message\":\"Chat_message__ySW5b\",\"avatar\":\"Chat_avatar__bWlGc\",\"body\":\"Chat_body__flGjt\",\"userName\":\"Chat_userName__BoRkW\",\"addMessageFormContainer\":\"Chat_addMessageFormContainer__wKqkF\",\"addMessageForm\":\"Chat_addMessageForm__gH2ye\",\"blueButton\":\"Chat_blueButton__jLeDQ\",\"error\":\"Chat_error__Mbegr\"};","import { FC, useState } from 'react'\nimport { useDispatch } from 'react-redux'\n// @ts-ignore\nimport classes from './Chat.module.css'\nimport { sendMessageThunk } from '../../redux/chat-reducer'\nimport { webSocketStatusType } from '../../types/api-types/chat-types'\n\n\ninterface AddMessageFormProps {\n  webSocketStatus: webSocketStatusType\n}\n\nconst AddMessageForm: FC<AddMessageFormProps> = ({ webSocketStatus }) => {\n  const [message, setMessage] = useState('')\n  const dispatch = useDispatch()\n\n  const onSendMessage = () => {\n    if (!message){\n      return\n    }\n    dispatch(sendMessageThunk(message))\n    setMessage('')\n  }\n\n  return (\n    <div className={ classes.addMessageForm }>\n      <textarea onChange={ event => setMessage(event.currentTarget.value) } value={ message } />\n      <button disabled={ webSocketStatus !== 'ready' } onClick={ onSendMessage } className={ classes.blueButton }>Send\n      </button>\n    </div>\n  )\n}\n\nexport default AddMessageForm","import React, { FC } from 'react'\nimport { NavLink } from 'react-router-dom'\n// @ts-ignore\nimport classes from './Chat.module.css'\n// @ts-ignore\nimport userAvatar from '../../assets/images/userAvatar.png'\nimport { IChatMessage } from '../../types/reducers-types/chat-types'\n\n\ninterface IMessageProps {\n  message: IChatMessage\n}\n\nconst Message: FC<IMessageProps> = React.memo(({ message: { userId, photo, userName, message } }) => {\n  return (\n    <div className={ classes.message }>\n      <NavLink to={ `/profile/${ userId }` } className={ classes.avatar }>\n        <img src={ photo || userAvatar } alt={ userAvatar } />\n      </NavLink>\n      <div className={ classes.body }>\n        <div className={ classes.userName }>{ userName }</div>\n        <div className={ classes.message }>{ message }</div>\n      </div>\n    </div>\n  )\n})\n\nexport default Message","import { RootState } from './store'\n\nexport const getChatMessagesSelector = (state: RootState) => {\n  return state.chatPage.messages\n}\n\nexport const getWebSocketStatusSelector = (state: RootState) => {\n  return state.chatPage.webSocketStatus\n}\n","import { FC, useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n// @ts-ignore\nimport classes from './Chat.module.css'\nimport AddMessageForm from './AddMessageForm'\nimport Message from './Message'\nimport { startMessagesListeningThunk, stopMessagesListeningThunk } from '../../redux/chat-reducer'\nimport { getChatMessagesSelector, getWebSocketStatusSelector } from '../../redux/chat-selectors'\nimport { IChatMessage } from '../../types/reducers-types/chat-types'\n\nconst ChatPage: FC = () => {\n  const [isAutoScrollActive, setIsAutoScrollActive] = useState(true)\n  const messages: IChatMessage[] = useSelector(getChatMessagesSelector)\n  const webSocketStatus = useSelector(getWebSocketStatusSelector)\n  const messagesEndRef = useRef(null)\n  const dispatch = useDispatch()\n\n  const onScroll = event => {\n    const element = event.currentTarget\n    Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300\n      ? !isAutoScrollActive && setIsAutoScrollActive(true)\n      : isAutoScrollActive && setIsAutoScrollActive(false)\n  }\n\n  // @ts-ignore\n  useEffect(() => {\n    dispatch(startMessagesListeningThunk())\n    return () => dispatch(stopMessagesListeningThunk())\n  }, [])\n\n  useEffect(() => {\n    if (isAutoScrollActive) messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }, [messages])\n\n  return (\n    <>\n      { webSocketStatus === 'error'\n        && <div className={ classes.chatPage }>\n          <div className={ classes.error }>Some Error Occurred. Please, refresh the page</div>\n        </div> }\n\n      <section className={ classes.chatPage }>\n        <div className={ classes.messages } onScroll={ onScroll }>\n          { messages.map((message) => <Message message={ message } key={ message.id } />) }\n          <div ref={ messagesEndRef } />\n        </div>\n        <div className={ classes.addMessageFormContainer }>\n          <AddMessageForm webSocketStatus={ webSocketStatus } />\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport default ChatPage"],"names":["webSocketStatus","useState","message","setMessage","dispatch","useDispatch","className","classes","onChange","event","currentTarget","value","disabled","onClick","sendMessageThunk","React","userId","photo","userName","to","src","userAvatar","alt","getChatMessagesSelector","state","chatPage","messages","getWebSocketStatusSelector","isAutoScrollActive","setIsAutoScrollActive","useSelector","messagesEndRef","useRef","useEffect","startMessagesListeningThunk","stopMessagesListeningThunk","current","scrollIntoView","behavior","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","map","id","ref"],"sourceRoot":""}