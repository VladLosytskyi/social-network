{"version":3,"file":"static/js/670.e5cb5897.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/Profile.module.css?b512","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileData/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__VHbzQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"newPostForm\":\"MyPosts_newPostForm__AK0gB\",\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\",\"blueButton\":\"MyPosts_blueButton__b6Bow\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__wW6-Y\",\"profileImage\":\"Post_profileImage__hiFi6\",\"postText\":\"Post_postText__xEaxK\",\"likes\":\"Post_likes__K9KVP\"};","import { FC } from 'react'\r\n// @ts-ignore\r\nimport classes from './Post.module.css'\r\n\r\ninterface PostProps {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post: FC<PostProps> = ({ message, likesCount }) => {\r\n  return (\r\n    <div className={ classes.post }>\r\n      <img\r\n        className={ classes.profileImage }\r\n        src=\"https://cdn-icons-png.flaticon.com/512/1464/1464795.png\"\r\n        alt=\"Profile avatar\"\r\n      />\r\n      <div>\r\n        <div className={ classes.postText }>\r\n          { message }\r\n        </div>\r\n        <div className={ classes.likes }>\r\n          { likesCount }<span> likes</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post","import { FC } from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n// @ts-ignore\nimport classes from './MyPosts.module.css'\nimport { Textarea } from '../../common/FormsControls/FormsControls'\nimport { maxLengthCreator, required } from '../../../utillities/validators/validators'\n\n\nconst validate = [\n  required,\n  maxLengthCreator(50)\n]\n\ninterface MyPostsFormValues {\n  newPostText: string\n}\n\ninterface MyPostsFormOwnProps {\n}\n\ntype MyPostsFormProps = InjectedFormProps<MyPostsFormValues, MyPostsFormOwnProps> & MyPostsFormOwnProps\n\nconst MyPostsForm: FC<MyPostsFormProps> = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={ handleSubmit }>\n      <div className={ classes.newPostForm }>\n        <Field component={ Textarea }\n               name=\"newPostText\"\n               placeholder=\"Enter your post text...\"\n               validate={ validate } />\n      </div>\n      <div>\n        <button className={ classes.blueButton }>Add post</button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<MyPostsFormValues, MyPostsFormOwnProps>({ form: 'profileMyPostsForm' })(MyPostsForm)","import React, { FC } from 'react'\r\n// @ts-ignore\r\nimport classes from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport MyPostsForm from './MyPostsForm'\r\nimport { IPost } from '../../../types/reducers-types/profile-types'\r\n\r\ninterface MyPostsProps {\r\n  posts: IPost[]\r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MyPostsProps> = React.memo(props => {\r\n  const postsElements =\r\n    [...props.posts]\r\n      .reverse()\r\n      .map(post => <Post message={ post.message } likesCount={ post.likesCount } key={ post.id } />)\r\n\r\n  const addPost = values => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={ classes.postsBlock }>\r\n      <h3>My posts</h3>\r\n      <MyPostsForm onSubmit={ addPost } />\r\n      <div className={ classes.posts }>\r\n        { postsElements }\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default MyPosts\r\n","import { connect } from 'react-redux'\nimport MyPosts from './MyPosts'\nimport { RootState } from '../../../redux/store'\nimport { addPost } from '../../../redux/profile-reducer'\nimport { IPost } from '../../../types/reducers-types/profile-types'\n\ninterface IMapStateToProps {\n  posts: IPost[]\n}\n\ninterface IMapDispatchToProps {\n  addPost: (newPostText: string) => void\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  posts: state.profilePage.posts\n})\nconst mapDispatchToProps = { addPost }\n\nexport default connect<IMapStateToProps, IMapDispatchToProps>(mapStateToProps, mapDispatchToProps)(MyPosts)\n","// extracted by mini-css-extract-plugin\nexport default {\"mr5\":\"ProfileInfo_mr5__4XyWt\",\"blueText\":\"ProfileInfo_blueText__HM4iA\",\"profileInfo\":\"ProfileInfo_profileInfo__QG8TK\",\"userAvatarContainer\":\"ProfileInfo_userAvatarContainer__Ffhil\",\"userAvatar\":\"ProfileInfo_userAvatar__+uFDb\",\"setUserAvatar\":\"ProfileInfo_setUserAvatar__bNSSg\",\"profileDataContainer\":\"ProfileInfo_profileDataContainer__TTK2c\",\"profileData\":\"ProfileInfo_profileData__m1bqM\",\"status\":\"ProfileInfo_status__YrBI5\",\"statusInput\":\"ProfileInfo_statusInput__XlSnR\",\"fieldsContainer\":\"ProfileInfo_fieldsContainer__u9xNU\",\"fieldContainer\":\"ProfileInfo_fieldContainer__EXeV+\",\"contact\":\"ProfileInfo_contact__sQB8W\",\"error\":\"ProfileInfo_error__Vu9Ki\",\"buttonsContainer\":\"ProfileInfo_buttonsContainer__FEDZe\",\"blueButton\":\"ProfileInfo_blueButton__E5ofx\"};","import { FC, useEffect, useState } from 'react'\n// @ts-ignore\nimport classes from '../ProfileInfo.module.css'\n\n\ninterface ProfileStatusProps {\n  initialStatus: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n}\n\nconst ProfileStatus: FC<ProfileStatusProps> = ({ initialStatus, updateStatus, isOwner }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [status, setStatus] = useState(initialStatus)\n\n  useEffect(() => {\n    setStatus(initialStatus)\n  }, [initialStatus])\n\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n\n  const saveChanges = () => {\n    setEditMode(false)\n    updateStatus(status)\n  }\n\n  const discardChanges = () => {\n    setEditMode(false)\n  }\n\n  const onStatusChange = event => {\n    setStatus(event.currentTarget.value)\n  }\n\n  return (\n    <div>\n      { isOwner\n        ? <>{ editMode\n          ? <div className={ classes.status }>\n            <div>\n              <span className={ classes.blueText }>Status:</span>\n              <input type=\"text\"\n                     onChange={ onStatusChange }\n                     value={ status }\n                     autoFocus={ true }\n                     className={ classes.statusInput }\n              />\n            </div>\n            <div className={ classes.buttonsContainer }>\n              <button onClick={ saveChanges } className={ classes.blueButton } style={ { marginRight: '10px' } }>Save Changes</button>\n              <button onClick={ discardChanges } className={ classes.blueButton }>Discard Changes</button>\n            </div>\n          </div>\n          : <div className={ classes.status }>\n            <div>\n              <span className={ classes.blueText }>Status: </span>{ status || 'No status' }\n            </div>\n            <button onClick={ activateEditMode } className={ classes.blueButton }>\n              <span>Change Status</span>\n            </button>\n          </div>\n        }</>\n        : <div className={ classes.status }>\n          <div>\n            <span className={ classes.blueText }>Status: </span>\n            <span>{ status || 'No status' }</span>\n          </div>\n        </div> }\n    </div>\n  )\n}\n\nexport default ProfileStatus","import { FC } from 'react'\n// @ts-ignore\nimport classes from '../ProfileInfo.module.css'\nimport { IProfile } from '../../../../types/reducers-types/profile-types'\n\n\ninterface ProfileDataProps {\n  profile: IProfile\n  isOwner: boolean\n  activateEditMode: () => void\n}\n\nconst ProfileData: FC<ProfileDataProps> = ({ profile, isOwner, activateEditMode }) => {\n  return (\n    <div className={ classes.profileData }>\n      <div className={ classes.fieldsContainer }>\n        <div>\n          <span className={ `${ classes.blueText } ${ classes.mr5 }` }>Full Name:</span>{ profile.fullName }\n        </div>\n        <div>\n          <span className={ `${ classes.blueText } ${ classes.mr5 }` }>About Me:</span>\n          { profile.aboutMe || 'No info' }\n        </div>\n        <div>\n          <span className={ `${ classes.blueText } ${ classes.mr5 }` }>Looking for a job:</span>\n          { profile.lookingForAJob ? 'Yes' : 'No' }\n        </div>\n        { profile.lookingForAJob &&\n          <div>\n            <span className={ `${ classes.blueText } ${ classes.mr5 }` }>My Professional Skills:</span>\n            { profile.lookingForAJobDescription || 'No Skills' }\n          </div> }\n        <div>\n          <span className={ `${ classes.blueText } ${ classes.mr5 }` }>Contacts:</span>\n          { Object.keys(profile.contacts).filter(key => profile.contacts[key]).length !== 0\n            ? Object.keys(profile.contacts)\n              .filter(key => profile.contacts[key])\n              .map(key => {\n                return (\n                  <div className={ classes.contact } key={ key }>\n                    <a href={ profile.contacts[key] } target=\"_blank\">{ key }</a>\n                  </div>\n                )\n              })\n            : <>No Contacts</>}\n        </div>\n      </div>\n      { isOwner &&\n        <div className={ classes.buttonsContainer }>\n          <button className={ classes.blueButton } onClick={ activateEditMode }>Edit Info</button>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default ProfileData","import { FC } from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n// @ts-ignore\nimport classes from '../ProfileInfo.module.css'\nimport { Input, Textarea } from '../../../common/FormsControls/FormsControls'\nimport { IContacts, IProfile } from '../../../../types/reducers-types/profile-types'\n\ninterface ProfileDataFormOwnProps {\n  contacts: IContacts\n  discardChanges: () => void\n}\n\ntype ProfileDataFormProps = InjectedFormProps<IProfile, ProfileDataFormOwnProps> & ProfileDataFormOwnProps\n\nconst ProfileDataForm: FC<ProfileDataFormProps> = ({ contacts, discardChanges, handleSubmit, error }) => {\n  return (\n    <form className={ classes.profileData } onSubmit={ handleSubmit }>\n      <div className={ classes.fieldsContainer }>\n        <div className={ classes.fieldContainer }>\n          <label htmlFor=\"fullName\" className={ classes.blueText }>Full Name:</label>\n          <Field component={ Input }\n                 name=\"fullName\"\n                 id=\"fullName\"\n                 type=\"text\"\n                 placeholder=\"Your full name\" />\n        </div>\n        <div className={ classes.fieldContainer }>\n          <label htmlFor=\"aboutMe\" className={ classes.blueText }>About Me:</label>\n          <Field component={ Textarea }\n                 name=\"aboutMe\"\n                 id=\"aboutMe\"\n                 type=\"text\"\n                 placeholder=\"Tell about yourself\" />\n        </div>\n        <div className={ classes.fieldContainer }>\n          <label htmlFor=\"lookingForAJob\" className={ classes.blueText }>Looking For a Job:</label>\n          <Field component={ Input }\n                 name=\"lookingForAJob\"\n                 id=\"lookingForAJob\"\n                 type=\"checkbox\" />\n        </div>\n        <div className={ classes.fieldContainer }>\n          <label htmlFor=\"lookingForAJobDescription\" className={ classes.blueText }>My Professional Skills:</label>\n          <Field component={ Textarea }\n                 name=\"lookingForAJobDescription\"\n                 id=\"lookingForAJobDescription\"\n                 type=\"text\"\n                 placeholder=\"Your professional skills\" />\n        </div>\n        <div className={ classes.fieldContainer }>\n          <span className={ classes.blueText }>Contacts:</span>\n          { Object.keys(contacts)\n            .map(key => {\n              return (\n                <div className={ classes.contact } key={ key }>\n                  <label className={ classes.blueText }>{ key }: </label>\n                  <Field component={ Input }\n                         name={ `contacts.${ key }` }\n                         id={ key }\n                         type=\"url\"\n                         placeholder={ key } />\n                </div>\n              )\n            }) }\n        </div>\n      </div>\n      { error &&\n        <div className={ classes.error }>\n          { error }\n        </div>\n      }\n      <div className={ classes.buttonsContainer }>\n        <button className={ classes.blueButton } style={ { marginRight: '10px' } }>\n          Save Changes\n        </button>\n        <button className={ classes.blueButton } onClick={ discardChanges }>\n          Discard Changes\n        </button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<IProfile, ProfileDataFormOwnProps>({ form: 'editProfileData' })(ProfileDataForm)","import { ChangeEvent, FC, useState } from 'react'\r\n// @ts-ignore\r\nimport classes from './ProfileInfo.module.css'\r\n// @ts-ignore\r\nimport userAvatar from '../../../assets/images/userAvatar.png'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatus from './ProfileData/ProfileStatus'\r\nimport ProfileData from './ProfileData/ProfileData'\r\nimport ProfileDataForm from './ProfileData/ProfileDataForm'\r\nimport { IProfile } from '../../../types/reducers-types/profile-types'\r\n\r\n\r\ninterface ProfileInfoProps {\r\n  profile: IProfile\r\n  status: string\r\n  updateProfile: (profile: IProfile) => void\r\n  updateStatus: (status: string) => void\r\n  postUserAvatar: (userAvatar: File) => void\r\n  isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: FC<ProfileInfoProps> = ({\r\n                                             profile,\r\n                                             status,\r\n                                             updateProfile,\r\n                                             updateStatus,\r\n                                             postUserAvatar,\r\n                                             isOwner\r\n                                           }) => {\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  const onUserAvatarSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.length){\r\n      postUserAvatar(event.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = async (formData: IProfile) => {\r\n    await updateProfile(formData)\r\n    setEditMode(false)\r\n  }\r\n\r\n  return !profile\r\n    ? <Preloader />\r\n    : <div className={ classes.profileInfo }>\r\n      <div className={ classes.userAvatarContainer }>\r\n        <img src={ profile.photos.large || userAvatar } className={ classes.userAvatar } alt=\"Profile photo\" />\r\n        { isOwner &&\r\n          <label className={ `${ classes.setUserAvatar } ${ classes.blueButton }` }>\r\n            <input type=\"file\"\r\n                   accept=\"image/png, image/jpg, image/gif, image/jpeg\"\r\n                   onChange={ onUserAvatarSelected } />\r\n            <span>Change Avatar</span>\r\n          </label> }\r\n      </div>\r\n      <ProfileStatus initialStatus={ status }\r\n                     updateStatus={ updateStatus }\r\n                     isOwner={ isOwner } />\r\n      { editMode\r\n        ? <ProfileDataForm initialValues={ profile }\r\n                           contacts={ profile.contacts }\r\n                           discardChanges={ () => setEditMode(false) }\r\n                           onSubmit={ onSubmit } />\r\n        : <ProfileData profile={ profile }\r\n                       isOwner={ isOwner }\r\n                       activateEditMode={ () => setEditMode(true) } />\r\n      }\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default ProfileInfo","import { FC } from 'react'\r\n// @ts-ignore\r\nimport classes from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport { IProfile } from '../../types/reducers-types/profile-types'\r\n\r\ninterface ProfileProps {\r\n  profile: IProfile\r\n  status: string\r\n  updateProfile: (profile: IProfile) => void\r\n  updateStatus: (status: string) => void\r\n  postUserAvatar: (userAvatar: File) => void\r\n  isOwner: boolean\r\n}\r\n\r\nconst Profile: FC<ProfileProps> = props => {\r\n  return (\r\n    <section className={ classes.profile }>\r\n      <ProfileInfo { ...props } />\r\n      <MyPostsContainer />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Profile","import { FC, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport Profile from './Profile'\nimport { RootState } from '../../redux/store'\nimport { getUserProfile, getStatus, updateProfile, updateStatus, postUserAvatar } from '../../redux/profile-reducer'\nimport { IProfile } from '../../types/reducers-types/profile-types'\n\n\ninterface IMapStateToProps {\n  profile: null | IProfile\n  status: string\n  authorisedUserId: number | null\n  isAuth: boolean\n}\n\ninterface IMapDispatchToProps {\n  getUserProfile: (userId: number) => void\n  getStatus: (userId: number) => void\n  updateProfile: (profile: IProfile) => void\n  updateStatus: (status: string) => void\n  postUserAvatar: (userAvatar: File) => void\n}\ninterface OwnProps {}\ntype ProfileContainerProps = IMapStateToProps & IMapDispatchToProps & OwnProps\n\n\nconst ProfileContainer: FC<ProfileContainerProps> = props => {\n  const navigate = useNavigate()\n  const params = useParams()\n\n  useEffect(() => {\n    let userId = +params.userId\n    if (!userId){\n      userId = props.authorisedUserId\n      if (!userId){\n        navigate('/login')\n      }\n    }\n    props.getUserProfile(userId)\n    props.getStatus(userId)\n  }, [params.userId])\n\n  return (\n    <Profile profile={ props.profile }\n             status={ props.status }\n             updateProfile={ props.updateProfile }\n             updateStatus={ props.updateStatus }\n             postUserAvatar={ props.postUserAvatar }\n             isOwner={ !params.userId }\n    />\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorisedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n})\nconst mapDispatchToProps = { getUserProfile, getStatus, updateProfile, updateStatus, postUserAvatar }\n\nexport default connect<IMapStateToProps, IMapDispatchToProps, OwnProps>(mapStateToProps, mapDispatchToProps)(ProfileContainer)"],"names":["message","likesCount","className","classes","src","alt","validate","required","maxLengthCreator","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","name","placeholder","React","props","postsElements","posts","reverse","map","post","id","values","addPost","newPostText","mapDispatchToProps","connect","state","profilePage","MyPosts","initialStatus","updateStatus","isOwner","useState","editMode","setEditMode","status","setStatus","useEffect","type","onChange","event","currentTarget","value","autoFocus","onClick","style","marginRight","profile","activateEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","filter","key","length","href","target","discardChanges","error","htmlFor","Input","updateProfile","postUserAvatar","formData","photos","large","userAvatar","accept","files","initialValues","Preloader","MyPostsContainer","getUserProfile","getStatus","authorisedUserId","auth","userId","isAuth","navigate","useNavigate","params","useParams"],"sourceRoot":""}