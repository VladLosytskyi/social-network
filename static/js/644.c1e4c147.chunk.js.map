{"version":3,"file":"static/js/644.c1e4c147.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/Profile.module.css?b512","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm.tsx","redux/profile-selectors.ts","components/Profile/MyPosts/MyPosts.tsx","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileData/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfilePage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__VHbzQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"newPostForm\":\"MyPosts_newPostForm__AK0gB\",\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\",\"blueButton\":\"MyPosts_blueButton__b6Bow\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__wW6-Y\",\"profileImage\":\"Post_profileImage__hiFi6\",\"postText\":\"Post_postText__xEaxK\",\"likes\":\"Post_likes__K9KVP\"};","import { FC } from 'react'\r\n// @ts-ignore\r\nimport classes from './Post.module.css'\r\n// @ts-ignore\r\nimport userAvatar from '../../../../assets/images/userAvatar.png'\r\nimport { IAvatar } from '../../../../types/reducers-types/profile-types'\r\n\r\ninterface PostProps {\r\n  avatar: undefined | null | IAvatar\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post: FC<PostProps> = ({ avatar, message, likesCount }) => {\r\n  return (\r\n    <div className={ classes.post }>\r\n      <img\r\n        className={ classes.profileImage }\r\n        src={ avatar?.small || userAvatar }\r\n        alt=\"Profile avatar\"\r\n      />\r\n      <div>\r\n        <div className={ classes.postText }>\r\n          { message }\r\n        </div>\r\n        <div className={ classes.likes }>\r\n          { likesCount }<span> likes</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post","import { FC } from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n// @ts-ignore\nimport classes from './MyPosts.module.css'\nimport { Textarea } from '../../common/FormsControls/FormsControls'\nimport { maxLengthCreator, required } from '../../../utillities/validators/validators'\n\n\nconst validate = [\n  required,\n  maxLengthCreator(50)\n]\n\ninterface MyPostsFormValues {\n  newPostText: string\n}\n\ninterface MyPostsFormOwnProps {\n}\n\ntype MyPostsFormProps = InjectedFormProps<MyPostsFormValues, MyPostsFormOwnProps> & MyPostsFormOwnProps\n\nconst MyPostsForm: FC<MyPostsFormProps> = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={ handleSubmit }>\n      <div className={ classes.newPostForm }>\n        <Field component={ Textarea }\n               name=\"newPostText\"\n               placeholder=\"Enter your post text...\"\n               validate={ validate } />\n      </div>\n      <div>\n        <button className={ classes.blueButton }>Add post</button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<MyPostsFormValues, MyPostsFormOwnProps>({ form: 'profileMyPostsForm' })(MyPostsForm)","import { RootState } from './store'\n\nexport const getProfileSelector = (state: RootState) => {\n  return state.profilePage.profile\n}\n\nexport const getAvatarSelector = (state: RootState) => {\n  return state.profilePage.profile?.photos\n}\n\nexport const getStatusSelector = (state: RootState) => {\n  return state.profilePage.status\n}\n\nexport const getPostsSelector = (state: RootState) => {\n  return state.profilePage.posts\n}\n","import React, { FC } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// @ts-ignore\r\nimport classes from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport MyPostsForm from './MyPostsForm'\r\nimport { addPostAC } from '../../../redux/profile-reducer'\r\nimport { getAvatarSelector, getPostsSelector } from '../../../redux/profile-selectors'\r\n\r\n\r\nconst MyPosts: FC = React.memo(() => {\r\n\r\n  const posts = useSelector(getPostsSelector)\r\n  const avatar = useSelector(getAvatarSelector)\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  const addPost = values => {\r\n    dispatch(addPostAC(values.newPostText))\r\n  }\r\n\r\n  const postsElements =\r\n    [...posts]\r\n      .reverse()\r\n      .map(post => <Post avatar={ avatar } message={ post.message } likesCount={ post.likesCount } key={ post.id } />)\r\n\r\n  return (\r\n    <div className={ classes.postsBlock }>\r\n      <h3>My posts</h3>\r\n      <MyPostsForm onSubmit={ addPost } />\r\n      <div className={ classes.posts }>\r\n        { postsElements }\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default MyPosts\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mr5\":\"ProfileInfo_mr5__4XyWt\",\"blueText\":\"ProfileInfo_blueText__HM4iA\",\"profileInfo\":\"ProfileInfo_profileInfo__QG8TK\",\"userAvatarContainer\":\"ProfileInfo_userAvatarContainer__Ffhil\",\"userAvatar\":\"ProfileInfo_userAvatar__+uFDb\",\"setUserAvatar\":\"ProfileInfo_setUserAvatar__bNSSg\",\"profileDataContainer\":\"ProfileInfo_profileDataContainer__TTK2c\",\"profileData\":\"ProfileInfo_profileData__m1bqM\",\"status\":\"ProfileInfo_status__YrBI5\",\"statusInput\":\"ProfileInfo_statusInput__XlSnR\",\"fieldsContainer\":\"ProfileInfo_fieldsContainer__u9xNU\",\"fieldContainer\":\"ProfileInfo_fieldContainer__EXeV+\",\"contact\":\"ProfileInfo_contact__sQB8W\",\"error\":\"ProfileInfo_error__Vu9Ki\",\"buttonsContainer\":\"ProfileInfo_buttonsContainer__FEDZe\",\"blueButton\":\"ProfileInfo_blueButton__E5ofx\"};","import { FC, useEffect, useState } from 'react'\n// @ts-ignore\nimport classes from '../ProfileInfo.module.css'\n\n\ninterface ProfileStatusProps {\n  initialStatus: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n}\n\nconst ProfileStatus: FC<ProfileStatusProps> = ({ initialStatus, updateStatus, isOwner }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [status, setStatus] = useState(initialStatus)\n\n  useEffect(() => {\n    setStatus(initialStatus)\n  }, [initialStatus])\n\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n\n  const saveChanges = () => {\n    setEditMode(false)\n    updateStatus(status)\n  }\n\n  const discardChanges = () => {\n    setEditMode(false)\n  }\n\n  const onStatusChange = event => {\n    setStatus(event.currentTarget.value)\n  }\n\n  return (\n    <div>\n      { isOwner\n        ? <>{ editMode\n          ? <div className={ classes.status }>\n            <div>\n              <span className={ classes.blueText }>Status:</span>\n              <input type=\"text\"\n                     onChange={ onStatusChange }\n                     value={ status }\n                     autoFocus={ true }\n                     className={ classes.statusInput }\n              />\n            </div>\n            <div className={ classes.buttonsContainer }>\n              <button onClick={ saveChanges } className={ classes.blueButton } style={ { marginRight: '10px' } }>Save Changes</button>\n              <button onClick={ discardChanges } className={ classes.blueButton }>Discard Changes</button>\n            </div>\n          </div>\n          : <div className={ classes.status }>\n            <div>\n              <span className={ classes.blueText }>Status: </span>{ status || 'No status' }\n            </div>\n            <button onClick={ activateEditMode } className={ classes.blueButton }>Change Status</button>\n          </div>\n        }</>\n        : <div className={ classes.status }>\n          <div>\n            <span className={ classes.blueText }>Status: </span>\n            <span>{ status || 'No status' }</span>\n          </div>\n        </div> }\n    </div>\n  )\n}\n\nexport default ProfileStatus","import { FC } from 'react'\n// @ts-ignore\nimport classes from '../ProfileInfo.module.css'\nimport { IProfile } from '../../../../types/reducers-types/profile-types'\n\n\ninterface ProfileDataProps {\n  profile: IProfile\n  isOwner: boolean\n  activateEditMode: () => void\n}\n\nconst ProfileData: FC<ProfileDataProps> = ({ profile, isOwner, activateEditMode }) => {\n  return (\n    <div className={ classes.profileData }>\n      <div className={ classes.fieldsContainer }>\n        <div>\n          <span className={ `${ classes.blueText } ${ classes.mr5 }` }>Full Name:</span>{ profile.fullName }\n        </div>\n        <div>\n          <span className={ `${ classes.blueText } ${ classes.mr5 }` }>About Me:</span>\n          { profile.aboutMe || 'No info' }\n        </div>\n        <div>\n          <span className={ `${ classes.blueText } ${ classes.mr5 }` }>Looking for a job:</span>\n          { profile.lookingForAJob ? 'Yes' : 'No' }\n        </div>\n        { profile.lookingForAJob &&\n          <div>\n            <span className={ `${ classes.blueText } ${ classes.mr5 }` }>My Professional Skills:</span>\n            { profile.lookingForAJobDescription || 'No Skills' }\n          </div> }\n        <div>\n          <span className={ `${ classes.blueText } ${ classes.mr5 }` }>Contacts:</span>\n          { Object.keys(profile.contacts).filter(key => profile.contacts[key]).length !== 0\n            ? Object.keys(profile.contacts)\n              .filter(key => profile.contacts[key])\n              .map(key => {\n                return (\n                  <div className={ classes.contact } key={ key }>\n                    <a href={ profile.contacts[key] } target=\"_blank\">{ key }</a>\n                  </div>\n                )\n              })\n            : <>No Contacts</>}\n        </div>\n      </div>\n      { isOwner &&\n        <div className={ classes.buttonsContainer }>\n          <button className={ classes.blueButton } onClick={ activateEditMode }>Edit Info</button>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default ProfileData","import { FC } from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n// @ts-ignore\nimport classes from '../ProfileInfo.module.css'\nimport { Input, Textarea } from '../../../common/FormsControls/FormsControls'\nimport { IContacts, IProfile } from '../../../../types/reducers-types/profile-types'\n\ninterface ProfileDataFormOwnProps {\n  contacts: IContacts\n  discardChanges: () => void\n}\n\ntype ProfileDataFormProps = InjectedFormProps<IProfile, ProfileDataFormOwnProps> & ProfileDataFormOwnProps\n\nconst ProfileDataForm: FC<ProfileDataFormProps> = ({ contacts, discardChanges, handleSubmit, error }) => {\n  return (\n    <form className={ classes.profileData } onSubmit={ handleSubmit }>\n      <div className={ classes.fieldsContainer }>\n        <div className={ classes.fieldContainer }>\n          <label htmlFor=\"fullName\" className={ classes.blueText }>Full Name:</label>\n          <Field component={ Input }\n                 name=\"fullName\"\n                 id=\"fullName\"\n                 type=\"text\"\n                 placeholder=\"Your full name\" />\n        </div>\n        <div className={ classes.fieldContainer }>\n          <label htmlFor=\"aboutMe\" className={ classes.blueText }>About Me:</label>\n          <Field component={ Textarea }\n                 name=\"aboutMe\"\n                 id=\"aboutMe\"\n                 type=\"text\"\n                 placeholder=\"Tell about yourself\" />\n        </div>\n        <div className={ classes.fieldContainer }>\n          <label htmlFor=\"lookingForAJob\" className={ classes.blueText }>Looking For a Job:</label>\n          <Field component={ Input }\n                 name=\"lookingForAJob\"\n                 id=\"lookingForAJob\"\n                 type=\"checkbox\" />\n        </div>\n        <div className={ classes.fieldContainer }>\n          <label htmlFor=\"lookingForAJobDescription\" className={ classes.blueText }>My Professional Skills:</label>\n          <Field component={ Textarea }\n                 name=\"lookingForAJobDescription\"\n                 id=\"lookingForAJobDescription\"\n                 type=\"text\"\n                 placeholder=\"Your professional skills\" />\n        </div>\n        <div className={ classes.fieldContainer }>\n          <span className={ classes.blueText }>Contacts:</span>\n          { Object.keys(contacts)\n            .map(key => {\n              return (\n                <div className={ classes.contact } key={ key }>\n                  <label className={ classes.blueText } htmlFor={ key }>{ key }: </label>\n                  <Field component={ Input }\n                         name={ `contacts.${ key }` }\n                         id={ key }\n                         type=\"url\"\n                         placeholder={ key } />\n                </div>\n              )\n            }) }\n        </div>\n      </div>\n      { error &&\n        <div className={ classes.error }>\n          { error }\n        </div>\n      }\n      <div className={ classes.buttonsContainer }>\n        <button className={ classes.blueButton } style={ { marginRight: '10px' } }>\n          Save Changes\n        </button>\n        <button className={ classes.blueButton } onClick={ discardChanges }>\n          Discard Changes\n        </button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<IProfile, ProfileDataFormOwnProps>({ form: 'editProfileData' })(ProfileDataForm)","import { ChangeEvent, FC, useState } from 'react'\r\n// @ts-ignore\r\nimport classes from './ProfileInfo.module.css'\r\n// @ts-ignore\r\nimport userAvatar from '../../../assets/images/userAvatar.png'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatus from './ProfileData/ProfileStatus'\r\nimport ProfileData from './ProfileData/ProfileData'\r\nimport ProfileDataForm from './ProfileData/ProfileDataForm'\r\nimport { IProfile } from '../../../types/reducers-types/profile-types'\r\n\r\n\r\ninterface ProfileInfoProps {\r\n  profile: IProfile\r\n  status: string\r\n  updateProfile: (profile: IProfile) => void\r\n  updateStatus: (status: string) => void\r\n  postUserAvatar: (userAvatar: File) => void\r\n  isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: FC<ProfileInfoProps> = ({\r\n                                             profile,\r\n                                             status,\r\n                                             updateProfile,\r\n                                             updateStatus,\r\n                                             postUserAvatar,\r\n                                             isOwner\r\n                                           }) => {\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  const onUserAvatarSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.length){\r\n      postUserAvatar(event.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = async (formData: IProfile) => {\r\n    await updateProfile(formData)\r\n    setEditMode(false)\r\n  }\r\n\r\n  return !profile\r\n    ? <Preloader />\r\n    : <div className={ classes.profileInfo }>\r\n      <div className={ classes.userAvatarContainer }>\r\n        <img src={ profile.photos.large || userAvatar } className={ classes.userAvatar } alt=\"Profile photo\" />\r\n        { isOwner &&\r\n          <label className={ `${ classes.setUserAvatar } ${ classes.blueButton }` }>\r\n            <input type=\"file\"\r\n                   accept=\"image/png, image/jpg, image/gif, image/jpeg\"\r\n                   onChange={ onUserAvatarSelected } />\r\n            <span>Change Avatar</span>\r\n          </label> }\r\n      </div>\r\n      <ProfileStatus initialStatus={ status }\r\n                     updateStatus={ updateStatus }\r\n                     isOwner={ isOwner } />\r\n      { editMode\r\n        ? <ProfileDataForm initialValues={ profile }\r\n                           contacts={ profile.contacts }\r\n                           discardChanges={ () => setEditMode(false) }\r\n                           onSubmit={ onSubmit } />\r\n        : <ProfileData profile={ profile }\r\n                       isOwner={ isOwner }\r\n                       activateEditMode={ () => setEditMode(true) } />\r\n      }\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default ProfileInfo","import { FC, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\n// @ts-ignore\r\nimport classes from './Profile.module.css'\r\nimport MyPosts from './MyPosts/MyPosts'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport {\r\n  getStatusThunk,\r\n  getUserProfileThunk,\r\n  postUserAvatarThunk,\r\n  updateProfileThunk,\r\n  updateStatusThunk\r\n} from '../../redux/profile-reducer'\r\nimport { getProfileSelector, getStatusSelector } from '../../redux/profile-selectors'\r\nimport { getAuthorisedUserIdSelector } from '../../redux/auth-selectors'\r\nimport { IProfile } from '../../types/reducers-types/profile-types'\r\n\r\n\r\nconst ProfilePage: FC = () => {\r\n\r\n  const profile = useSelector(getProfileSelector)\r\n  const status = useSelector(getStatusSelector)\r\n  const authorisedUserId = useSelector(getAuthorisedUserIdSelector)\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  const updateProfile = (profile: IProfile) => {\r\n    dispatch(updateProfileThunk(profile))\r\n  }\r\n  const updateStatus = (status: string) => {\r\n    dispatch(updateStatusThunk(status))\r\n  }\r\n  const postUserAvatar = (userAvatar: File) => {\r\n    dispatch(postUserAvatarThunk(userAvatar))\r\n  }\r\n\r\n\r\n  const navigate = useNavigate()\r\n  const params = useParams()\r\n\r\n  useEffect(() => {\r\n    let userId = +params.userId\r\n    if (!userId){\r\n      userId = authorisedUserId\r\n      if (!userId){\r\n        navigate('/login')\r\n      }\r\n    }\r\n    dispatch(getUserProfileThunk(userId))\r\n    dispatch(getStatusThunk(userId))\r\n  }, [params.userId])\r\n\r\n  return (\r\n    <section className={ classes.profile }>\r\n      <ProfileInfo profile={ profile }\r\n                   status={ status }\r\n                   updateProfile={ updateProfile }\r\n                   updateStatus={ updateStatus }\r\n                   postUserAvatar={ postUserAvatar }\r\n                   isOwner={ !params.userId }\r\n      />\r\n      <MyPosts />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default ProfilePage"],"names":["avatar","message","likesCount","className","classes","src","small","userAvatar","alt","validate","required","maxLengthCreator","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","name","placeholder","getProfileSelector","state","profilePage","profile","getAvatarSelector","photos","getStatusSelector","status","getPostsSelector","posts","React","useSelector","dispatch","useDispatch","postsElements","reverse","map","post","id","values","addPostAC","newPostText","initialStatus","updateStatus","isOwner","useState","editMode","setEditMode","setStatus","useEffect","type","onChange","event","currentTarget","value","autoFocus","onClick","style","marginRight","activateEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","filter","key","length","href","target","discardChanges","error","htmlFor","Input","updateProfile","postUserAvatar","formData","large","accept","files","initialValues","Preloader","authorisedUserId","getAuthorisedUserIdSelector","navigate","useNavigate","params","useParams","userId","getUserProfileThunk","getStatusThunk","updateProfileThunk","updateStatusThunk","postUserAvatarThunk"],"sourceRoot":""}